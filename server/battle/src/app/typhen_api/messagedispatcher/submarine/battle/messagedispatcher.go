// This file was generated by typhen-api

package battle

import (
	"app/typhen_api/core"
	submarine_battle "app/typhen_api/type/submarine/battle"
)

// MessageDispatcher handles raw binary messages, and dispatches messages to sub handlers.
type MessageDispatcher struct {
	serializer   *typhenapi.Serializer
	errorHandler func([]byte, error)

	Ping func(message *submarine_battle.Ping)
}

// New creates a MessageDispatcher.
func New(serializer *typhenapi.Serializer, errorHandler func([]byte, error)) *MessageDispatcher {
	d := &MessageDispatcher{}
	d.serializer = serializer
	d.errorHandler = errorHandler
	return d
}

// HandleMessage handles a binary message.
func (d *MessageDispatcher) HandleMessage(data []byte) {

	message, err := typhenapi.NewMessageFromBytes(data)
	if err != nil {
		d.errorHandler(data, err)
		return
	}

	switch message.Type {
	case -973977363:
		typhenType := new(submarine_battle.Ping)
		if err := d.serializer.Deserialize(message.Body, typhenType); err != nil {
			d.errorHandler(data, err)
			return
		}

		if err := typhenType.Coerce(); err != nil {
			d.errorHandler(data, err)
			return
		}

		if d.Ping != nil {
			d.Ping(typhenType)
		}
	}
}

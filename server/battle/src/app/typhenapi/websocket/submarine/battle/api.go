// This file was generated by typhen-api

package battle

import (
	"app/typhenapi/core"
	submarine_battle "app/typhenapi/type/submarine/battle"
)

const (
	MessageType_Ping int32 = -973977363
)

// WebSocketAPI sends messages, and dispatches message events.
type WebSocketAPI struct {
	session      typhenapi.Session
	serializer   typhenapi.Serializer
	errorHandler func(error)

	PingHandler func(message *submarine_battle.PingObject)
}

// New creates a WebSocketAPI.
func New(session typhenapi.Session, serializer typhenapi.Serializer, errorHandler func(error)) *WebSocketAPI {
	api := &WebSocketAPI{}
	api.session = session
	api.serializer = serializer
	api.errorHandler = errorHandler
	return api
}

// SendPing sends a ping message.
func (api *WebSocketAPI) SendPing(ping *submarine_battle.PingObject) error {
	message, err := typhenapi.NewMessage(api.serializer, MessageType_Ping, ping)

	if err != nil {
		if api.errorHandler != nil {
			api.errorHandler(err)
		}
		return err
	}

	if err := api.session.Send(message.Bytes()); err != nil {
		return err
	}
	return nil
}

// DispatchMessageEvent dispatches a binary message.
func (api *WebSocketAPI) DispatchMessageEvent(data []byte) error {

	message, err := typhenapi.NewMessageFromBytes(data)

	if err != nil {
		if api.errorHandler != nil {
			api.errorHandler(err)
		}
		return err
	}

	switch message.Type {
	case MessageType_Ping:
		typhenType := new(submarine_battle.PingObject)
		if err := api.serializer.Deserialize(message.Body, typhenType); err != nil {
			if api.errorHandler != nil {
				api.errorHandler(err)
			}
			return err
		}

		if err := typhenType.Coerce(); err != nil {
			if api.errorHandler != nil {
				api.errorHandler(err)
			}
			return err
		}

		if api.PingHandler != nil {
			api.PingHandler(typhenType)
		}
	}

	return nil
}

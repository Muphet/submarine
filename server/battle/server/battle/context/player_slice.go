// Generated by: gen
// TypeWriter: slice
// Directive: +gen on *Player

package context

import "errors"

// PlayerSlice is a slice of type *Player. Use it where you would use []*Player.
type PlayerSlice []*Player

// All verifies that all elements of PlayerSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#All
func (rcv PlayerSlice) All(fn func(*Player) bool) bool {
	for _, v := range rcv {
		if !fn(v) {
			return false
		}
	}
	return true
}

// Any verifies that one or more elements of PlayerSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#Any
func (rcv PlayerSlice) Any(fn func(*Player) bool) bool {
	for _, v := range rcv {
		if fn(v) {
			return true
		}
	}
	return false
}

// First returns the first element that returns true for the passed func. Returns error if no elements return true. See: http://clipperhouse.github.io/gen/#First
func (rcv PlayerSlice) First(fn func(*Player) bool) (result *Player, err error) {
	for _, v := range rcv {
		if fn(v) {
			result = v
			return
		}
	}
	err = errors.New("no PlayerSlice elements return true for passed func")
	return
}

// Where returns a new PlayerSlice whose elements return true for func. See: http://clipperhouse.github.io/gen/#Where
func (rcv PlayerSlice) Where(fn func(*Player) bool) (result PlayerSlice) {
	for _, v := range rcv {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// Count gives the number elements of PlayerSlice that return true for the passed func. See: http://clipperhouse.github.io/gen/#Count
func (rcv PlayerSlice) Count(fn func(*Player) bool) (result int) {
	for _, v := range rcv {
		if fn(v) {
			result++
		}
	}
	return
}

// SelectInt64 projects a slice of int64 from PlayerSlice, typically called a map in other frameworks. See: http://clipperhouse.github.io/gen/#Select
func (rcv PlayerSlice) SelectInt64(fn func(*Player) int64) (result []int64) {
	for _, v := range rcv {
		result = append(result, fn(v))
	}
	return
}

// GroupByString groups elements into a map keyed by string. See: http://clipperhouse.github.io/gen/#GroupBy
func (rcv PlayerSlice) GroupByString(fn func(*Player) string) map[string]PlayerSlice {
	result := make(map[string]PlayerSlice)
	for _, v := range rcv {
		key := fn(v)
		result[key] = append(result[key], v)
	}
	return result
}

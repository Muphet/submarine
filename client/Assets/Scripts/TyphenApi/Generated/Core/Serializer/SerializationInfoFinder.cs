// This file was generated by typhen-api

using System.Reflection;
using System.Collections.Generic;
using System.Linq;

namespace TyphenApi
{
    public static class SerializationInfoFinder
    {
        static readonly Dictionary<System.Type, ISerializationInfo[]> serializationInfosDict = new Dictionary<System.Type, ISerializationInfo[]>();

        public static ISerializationInfo[] FindAll(object obj)
        {
            return FindAll(obj.GetType());
        }

        public static ISerializationInfo[] FindAll(System.Type objType)
        {
            ISerializationInfo[] serializationInfos;

            if (!serializationInfosDict.TryGetValue(objType, out serializationInfos))
            {
                serializationInfos = objType.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy)
                    .Where(x => typeof(ISerializationInfo).IsAssignableFrom(x.FieldType))
                    .Select(x => x.GetValue(null))
                    .OfType<ISerializationInfo>()
                    .ToArray();
                serializationInfosDict[objType] = serializationInfos;
            }
            return serializationInfos;
        }
    }
}

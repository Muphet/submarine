// This file was generated by typhen-api

using System;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;

namespace TyphenApi
{
    public interface ISerializationInfo
    {
        string PropertyName { get; }
        bool IsOptional { get; }
        System.Type ValueType { get; }
        object GetValue(object obj);
        void SetValue(object obj, object value);
    }

    public class SerializationInfo<ClassT, ValueT> : ISerializationInfo
    {
        readonly Func<ClassT, ValueT> getValueFunc;
        readonly Action<ClassT, ValueT> setValueFunc;

        public string PropertyName { get; private set; }
        public bool IsOptional { get; private set; }
        public System.Type ValueType { get; private set; }

        public SerializationInfo(string propertyName, bool isOptional, Func<ClassT, ValueT> getValueFunc, Action<ClassT, ValueT> setValueFunc)
        {
            this.getValueFunc = getValueFunc;
            this.setValueFunc = setValueFunc;
            PropertyName = propertyName;
            IsOptional = isOptional;
            ValueType = typeof(ValueT);
        }

        public object GetValue(object obj)
        {
            return getValueFunc((ClassT)obj);
        }

        public void SetValue(object obj, object rawValue)
        {
            ValueT value;

            try
            {
                value = (ValueT)rawValue;
            }
            catch (InvalidCastException)
            {
                value = (ValueT)Convert.ChangeType(rawValue, ValueType);
            }

            setValueFunc((ClassT)obj, value);
        }
    }

    public static class SerializationInfoUtility
    {
        static readonly Dictionary<System.Type, ISerializationInfo[]> serializationInfosDict = new Dictionary<System.Type, ISerializationInfo[]>();

        public static ISerializationInfo[] FindAll(object obj)
        {
            return FindAll(obj.GetType());
        }

        public static ISerializationInfo[] FindAll(System.Type objType)
        {
            ISerializationInfo[] serializationInfos;

            if (!serializationInfosDict.TryGetValue(objType, out serializationInfos))
            {
                serializationInfos = objType.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy)
                    .Where(x => typeof(ISerializationInfo).IsAssignableFrom(x.FieldType))
                    .Select(x => x.GetValue(null))
                    .OfType<ISerializationInfo>()
                    .ToArray();
                serializationInfosDict[objType] = serializationInfos;
            }
            return serializationInfos;
        }
    }
}

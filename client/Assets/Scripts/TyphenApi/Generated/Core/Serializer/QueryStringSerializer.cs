// This file was generated by typhen-api

using System;
using System.Collections.Generic;
using System.Text;

namespace TyphenApi
{
    public class QueryStringSerializer : ISerializer
    {
        public byte[] Serialize(object obj)
        {
            var texts = new List<string>();

            foreach (var info in SerializationInfoFinder.FindAll(obj))
            {
                var value = info.GetValue(obj);
                var valueType = info.ValueType;

                if (value == null)
                {
                    if (info.IsOptional)
                    {
                        continue;
                    }
                    else
                    {
                        var message = string.Format("{0}.{1} is not allowed to be null.", obj.GetType().FullName, info.PropertyName);
                        throw new NoNullAllowedException(message);
                    }
                }

                if (IsSerializableValue(value, valueType))
                {
                    var fixedValue = valueType.IsEnum ? (int)value : value;
                    var keyValueText = string.Format("{0}={1}",
                        Uri.EscapeDataString(info.PropertyName),
                        Uri.EscapeDataString(fixedValue.ToString())
                    );
                    texts.Add(keyValueText);
                }
                else
                {
                    var message = string.Format("Failed to serialize {0} ({1}) to {2}.{3}", value, valueType, obj.GetType().FullName, info.PropertyName);
                    throw new SerializeFailedException(message);
                }
            }

            return texts.Count > 0 ?
                Encoding.ASCII.GetBytes("?" + string.Join("&", texts.ToArray())) :
                Encoding.ASCII.GetBytes(string.Empty);
        }

        bool IsSerializableValue(object value, System.Type valueType)
        {
            return valueType.IsPrimitive || valueType.IsEnum || value is string;
        }
    }
}

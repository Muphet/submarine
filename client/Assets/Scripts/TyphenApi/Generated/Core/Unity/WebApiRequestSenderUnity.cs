// This file was generated by typhen-api

using UnityEngine.Experimental.Networking;
using System;
using System.Net;
using System.Collections;

namespace TyphenApi
{
    public class WebApiRequestSenderUnity : IWebApiRequestSender
    {
        public IEnumerator Send(IWebApiRequest apiRequest)
        {
            var request = CreateWebRequest(apiRequest);

            yield return request.Send();

            apiRequest.OnSendComplete(
                request.GetResponseHeaders(),
                request.downloadHandler.data,
                GetError(request));
            request.Dispose();
        }

        string GetError(UnityWebRequest request)
        {
            var error = request.error;
            if (string.IsNullOrEmpty(error))
            {
                if (request.responseCode >= 400)
                {
                    error = string.Format(
                        "{0}: {1}",
                        request.responseCode,
                        (HttpStatusCode)request.responseCode);
                }
            }
            return error;
        }

        UnityWebRequest CreateWebRequest(IWebApiRequest apiRequest)
        {
            UnityWebRequest request;

            switch (apiRequest.Method)
            {
                case HttpMethod.Get:
                case HttpMethod.Delete:
                {
                    var uri = apiRequest.Uri + apiRequest.Body.ToQueryString();
                    var method = apiRequest.Method.ToString().ToUpper();
                    request = new UnityWebRequest(uri, method);
                    break;
                }
                case HttpMethod.Post:
                case HttpMethod.Put:
                {
                    var uri = apiRequest.Uri.ToString();
                    var method = apiRequest.Method.ToString().ToUpper();
                    request = new UnityWebRequest(uri, method);
                    request.uploadHandler = new UploadHandlerRaw(apiRequest.BodyBytes);
                    break;
                }
                default:
                {
                    throw new NotImplementedException(apiRequest.Method + " method is not implemented yet");
                }
            }

            foreach (var kvp in apiRequest.Headers)
            {
                request.SetRequestHeader(kvp.Key, kvp.Value);
            }
            request.downloadHandler = new DownloadHandlerBuffer();
            return request;
        }
    }
}

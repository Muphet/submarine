// This file was generated by typhen-api

package {{lowerCamelCase parentModule}}

import (
	"errors"
	"{{@importBasePath}}/core"
	{{#each (requiredModules this false)}}
	{{alias}} "{{@importBasePath}}/type/{{path}}"
	{{/each}}
	{{#if (isErrorType this)}}
	"fmt"
	{{/if}}
)

var _ = errors.New;

// {{upperCamelCase name}} is a kind of TyphenAPI type.
type {{upperCamelCase name}} struct {
	{{#each properties}}
	{{upperCamelCase name}} {{typeName type ../parentModule isOptional true}} `json:"{{serializablePropertyName this}}"`
	{{/each}}
}

// Coerce the fields.
func (t *{{upperCamelCase name}}) Coerce() error {
	{{#each properties}}
	{{#if isOptional}}
	{{#if type.isEnum}}
	if err := t.{{upperCamelCase name}}.Coerce(); err != nil {
		return err
	}
	{{/if}}
	{{else}}
	{{#unless type.isPrimitiveType}}
	{{#unless type.isEnum}}
	if t.{{upperCamelCase name}} == nil {
		return errors.New("{{upperCamelCase name}} should not be empty")
	}
	{{/unless}}
	{{/unless}}
	{{#if type.isEnum}}
	if err := t.{{upperCamelCase name}}.Coerce(); err != nil {
		return err
	}
	{{/if}}
	{{/if}}
	{{/each}}
	return nil
}

{{#if (isErrorType this)}}
// Error returns the error message.
func (t *Error) Error() string {
	return fmt.Sprintf("{{#each properties}}{{upperCamelCase name}}: %v{{#unless @last}}, {{/unless}}{{/each}}", {{#each properties}}t.{{upperCamelCase name}}{{#unless @last}}, {{/unless}}{{/each}})
}
{{/if}}

// Bytes creates the byte array.
func (t *{{upperCamelCase name}}) Bytes(serializer typhenapi.Serializer) ([]byte, error) {
	if err := t.Coerce(); err != nil {
		return nil, err
	}

	data, err := serializer.Serialize(t)
	if err != nil {
		return nil, err
	}

	return data, nil
}

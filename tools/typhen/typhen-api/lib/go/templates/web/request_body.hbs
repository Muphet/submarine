// This file was generated by typhen-api

package {{lowerCamelCase parentModule}}

import (
	"errors"
	"net/url"
	"fmt"
	"{{@importBasePath}}/core"
	{{#each (requiredModules this false)}}
	{{alias}} "{{@importBasePath}}/type/{{path}}"
	{{/each}}
)

var _ = errors.New;

type {{upperCamelCase name}}RequestBody struct {
	{{#each callSignatures.0.parameters}}
	{{upperCamelCase name}} {{typeName type null isOptional true}} `codec:"{{serializablePropertyName this}}"`
	{{/each}}
}

// Coerce the fields.
func (t *{{upperCamelCase name}}RequestBody) Coerce() error {
	{{#each callSignatures.0.parameters}}
	{{#if isOptional}}
	{{#if type.isEnum}}
	if err := t.{{upperCamelCase name}}.Coerce(); err != nil {
		return err
	}
	{{/if}}
	{{else}}
	{{#unless type.isPrimitiveType}}
	if t.{{upperCamelCase name}} == nil {
		return errors.New("{{upperCamelCase name}} should not be empty")
	}
	{{/unless}}
	{{#if type.isEnum}}
	if err := t.{{upperCamelCase name}}.Coerce(); err != nil {
		return err
	}
	{{/if}}
	{{/if}}
	{{/each}}
	return nil
}

// Bytes creates the byte array.
func (t *{{upperCamelCase name}}RequestBody) Bytes(serializer typhenapi.Serializer) ([]byte, error) {
	if err := t.Coerce(); err != nil {
		return nil, err
	}

	data, err := serializer.Serialize(t)
	if err != nil {
		return nil, err
	}

	return data, nil
}

// QueryString returns the query string.
func (t *{{upperCamelCase name}}RequestBody) QueryString() string {
	queryString := fmt.Sprintf("{{#each callSignatures.0.parameters}}{{#if type.isPrimitiveType}}{{serializablePropertyName this}}=%v{{#unless @last}}&{{/unless}}{{/if}}{{/each}}", {{#each callSignatures.0.parameters}}{{#if type.isPrimitiveType}}t.{{upperCamelCase name}}{{#unless @last}}, {{/unless}}{{/if}}{{/each}})
	return url.QueryEscape(queryString)
}

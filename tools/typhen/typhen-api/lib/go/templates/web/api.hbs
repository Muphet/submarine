// This file was generated by typhen-api

package {{lowerCamelCase name}}

import (
	"{{@importBasePath}}/core"
	{{#each (webApiModules this)}}
	_{{alias}} "{{@importBasePath}}/web/{{path}}"
	{{/each}}
	{{#each (requiredModules this true)}}
	{{alias}} "{{@importBasePath}}/type/{{path}}"
	{{/each}}
	"bytes"
	"io"
	"io/ioutil"
	"net/http"
)

// WebAPI sends request.
type WebAPI struct {
	baseURI             string
	serializer          *typhenapi.Serializer
	Client              *http.Client
	OnBeforeRequestSend func(*http.Request)
	{{#each modules}}
	{{upperCamelCase name}} *_{{moduleName this '_'}}.WebAPI
	{{/each}}
}

// New creates a WebAPI.
func New(baseURI string, serializer *typhenapi.Serializer) *WebAPI {
	api := &WebAPI{}
	api.baseURI = baseURI
	api.serializer = serializer
	api.Client = &http.Client{}
	{{#each modules}}
	api.{{upperCamelCase name}} = _{{moduleName this '_'}}.New(baseURI, serializer)
	{{/each}}
	return api
}

{{#each functions}}
// {{upperCamelCase name}} send a {{lowerCamelCase name}} request.
{{#if comment}}
// {{comment}}
{{/if}}
{{#if (optionalParameters callSignatures.0.parameters)}}
// Optional parameters: {{#each (optionalParameters callSignatures.0.parameters)}}{{lowerCamelCase name}}{{#unless @last}}, {{/unless}}{{/each}}
{{/if}}
func (api *WebAPI) {{upperCamelCase name}}({{#each callSignatures.0.parameters}}{{lowerCamelCase name}} {{{typeName type null isOptional true}}}{{#unless @last}}, {{/unless}}{{/each}}) ({{{typeName callSignatures.0.returnType null false true}}}, error) {
	reqBody := &{{upperCamelCase name}}RequestBody{}
	{{#each callSignatures.0.parameters}}
	reqBody.{{upperCamelCase name}} = {{lowerCamelCase name}}
	{{/each}}

	{{#if (isRequiredRequestBody this)}}
	reqBodyData, err := reqBody.Bytes(api.serializer)
	if err != nil {
		return nil, err
	}

	req, err := api.createRequest("{{upperCaseMethod this}}", api.baseURI+"/{{uriPath this}}{{uriSuffix this}}", bytes.NewReader(reqBodyData))
	{{else}}
	req, err := api.createRequest("{{upperCaseMethod this}}", api.baseURI+"/{{uriPath this}}{{uriSuffix this}}&"+reqBody.QueryString(), nil)
	{{/if}}
	if err != nil {
		return nil, err
	}

	res, data, err := api.sendRequest(req)
	if err != nil {
		return nil, err
	}
	if res.StatusCode >= 400 {
		return nil, api.tryToDeserializeAPIError(data)
	}

	result := new({{{typeName callSignatures.0.returnType null false false}}})
	if err := api.serializer.Deserialize(data, result); err != nil {
		return nil, err
	}
	if err := result.Coerce(); err != nil {
		return nil, err
	}
	return result, nil
}
{{/each}}

func (api *WebAPI) tryToDeserializeAPIError(data []byte) error {
	apiError := new(submarine.Error)
	if err := api.serializer.Deserialize(data, apiError); err != nil {
		return err
	}

	if err := apiError.Coerce(); err != nil {
		return err
	}

	return apiError
}

func (api *WebAPI) createRequest(method, url string, body io.Reader) (*http.Request, error) {
	req, err := http.NewRequest(method, url, body)
	if err != nil {
		return nil, err
	}

	if api.OnBeforeRequestSend != nil {
		api.OnBeforeRequestSend(req)
	}

	return req, nil
}

func (api *WebAPI) sendRequest(req *http.Request) (*http.Response, []byte, error) {
	res, err := api.Client.Do(req)
	if err != nil {
		return nil, nil, err
	}
	defer res.Body.Close()

	data, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, nil, err
	}

	return res, data, nil
}

// This file was generated by typhen-api

package {{lowerCamelCase name}}

import (
	"{{@importBasePath}}"
	{{#each (webSocketApiModules this)}}
	_{{alias}} "{{@importBasePath}}/websocket/{{path}}"
	{{/each}}
	{{#each (requiredModules this false)}}
	{{alias}} "{{@importBasePath}}/type/{{path}}"
	{{/each}}
	{{#if (realTimeMessages types)}}
	"fmt"
	{{/if}}
)

{{#if (realTimeMessages types)}}
const (
	{{#each (realTimeMessages types)}}
	MessageType_{{upperCamelCase name}} int32 = {{webSocketMessageType this}}
	{{/each}}
)
{{/if}}

// WebSocketAPI sends messages, and dispatches message events.
type WebSocketAPI struct {
	session      typhenapi.Session
	serializer   typhenapi.Serializer
	errorHandler func(error)
	{{#each (webSocketApiModules this)}}
	{{upperCamelCase module.name}} *_{{moduleName module '_'}}.WebSocketAPI
	{{/each}}

	{{#each (realTimeMessages types)}}
	{{upperCamelCase name}}Handler func(message {{typeName this null false true}})
	{{/each}}
}

// New creates a WebSocketAPI.
func New(session typhenapi.Session, serializer typhenapi.Serializer, errorHandler func(error)) *WebSocketAPI {
	api := &WebSocketAPI{}
	api.session = session
	api.serializer = serializer
	api.errorHandler = errorHandler
	{{#each (webSocketApiModules this)}}
	api.{{upperCamelCase module.name}} = _{{moduleName module '_'}}.New(session, serializer, errorHandler)
	{{/each}}
	return api
}

{{#if (realTimeMessages types)}}
// Send sends a message.
func (api *WebSocketAPI) Send(body typhenapi.Type) (message *typhenapi.Message, err error) {
	switch messageBody := body.(type) {
	{{#each (realTimeMessages types)}}
	case {{typeName this null false true}}:
		message, err = typhenapi.NewMessage(api.serializer, MessageType_{{upperCamelCase name}}, messageBody)
	{{/each}}
	default:
		err = fmt.Errorf("Unsupported TyphenAPI type is given: %v", messageBody)
	}

	if err == nil {
    err = api.session.Send(message.Bytes())
	}

  if err != nil && api.errorHandler != nil {
    api.errorHandler(err)
  }
  return
}
{{/if}}

{{#each (realTimeMessages types)}}
// Send{{upperCamelCase name}} sends a {{lowerCamelCase name}} message.
func (api *WebSocketAPI) Send{{upperCamelCase name}}({{lowerCamelCase name}} {{typeName this null false true}}) error {
	message, err := typhenapi.NewMessage(api.serializer, MessageType_{{upperCamelCase name}}, {{lowerCamelCase name}})

	if err != nil {
		if api.errorHandler != nil {
			api.errorHandler(err)
		}
		return err
	}

	if err := api.session.Send(message.Bytes()); err != nil {
    if api.errorHandler != nil {
      api.errorHandler(err)
    }
		return err
	}
	return nil
}
{{/each}}

// DispatchMessageEvent dispatches a binary message.
func (api *WebSocketAPI) DispatchMessageEvent(data []byte) error {
	{{#each (webSocketApiModules this)}}
	if err := api.{{upperCamelCase module.name}}.DispatchMessageEvent(data); err != nil {
		return err
	}
	{{/each}}

	{{#if (realTimeMessages types)}}
	message, err := typhenapi.NewMessageFromBytes(data)

	if err != nil {
		if api.errorHandler != nil {
			api.errorHandler(err)
		}
		return err
	}

	switch message.Type {
	{{#each (realTimeMessages types)}}
	case MessageType_{{upperCamelCase name}}:
		typhenType := new({{typeName this null false false}})
		if err := api.serializer.Deserialize(message.Body, typhenType); err != nil {
			if api.errorHandler != nil {
				api.errorHandler(err)
			}
			return err
		}

		if err := typhenType.Coerce(); err != nil {
			if api.errorHandler != nil {
				api.errorHandler(err)
			}
			return err
		}

		if api.{{upperCamelCase name}}Handler != nil {
			api.{{upperCamelCase name}}Handler(typhenType)
		}
	{{/each}}
	}
	{{/if}}

	return nil
}

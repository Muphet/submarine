// This file was generated by typhen-api

package {{lowerCamelCase name}}

import (
	"{{@importBasePath}}/core"
	{{#each (webSocketApiModules this)}}
	_{{alias}} "{{@importBasePath}}/websocket/{{path}}"
	{{/each}}
	{{#each (requiredModules this false)}}
	{{alias}} "{{@importBasePath}}/type/{{path}}"
	{{/each}}
)

{{#if variables}}
const (
	{{#each variables}}
	MessageType_{{upperCamelCase name}} int32 = {{webSocketMessageType this}}
	{{/each}}
)
{{/if}}

// WebSocketAPI sends messages, and dispatches message events.
type WebSocketAPI struct {
	session      typhenapi.Session
	serializer   *typhenapi.Serializer
	errorHandler func(interface{}, error)
	{{#each modules}}
	{{upperCamelCase name}} *_{{moduleName this '_'}}.WebSocketAPI
	{{/each}}

	{{#each variables}}
	On{{upperCamelCase name}}Receive func(message {{typeName type null false true}})
	{{/each}}
}

// New creates a WebSocketAPI.
func New(session typhenapi.Session, serializer *typhenapi.Serializer, errorHandler func(interface{}, error)) *WebSocketAPI {
	api := &WebSocketAPI{}
	api.session = session
	api.serializer = serializer
	api.errorHandler = errorHandler
	{{#each modules}}
	api.{{upperCamelCase name}} = _{{moduleName this '_'}}.New(session, serializer, errorHandler)
	{{/each}}
	return api
}

{{#each variables}}
// Send{{upperCamelCase name}} sends a {{lowerCamelCase name}} message.
func (api *WebSocketAPI) Send{{upperCamelCase name}}({{lowerCamelCase name}} {{typeName type null false true}}) error {
	message, err := typhenapi.NewMessage(api.serializer, MessageType_{{upperCamelCase name}}, {{lowerCamelCase name}})

	if err != nil {
		if api.errorHandler != nil {
			api.errorHandler({{lowerCamelCase name}}, err)
		}
		return err
	}

	api.session.Send(message.Bytes())
	return nil
}
{{/each}}

// DispatchMessageEvent dispatches a binary message.
func (api *WebSocketAPI) DispatchMessageEvent(data []byte) error {
	{{#each modules}}
	api.{{upperCamelCase name}}.DispatchMessageEvent(data)
	{{/each}}

	{{#if variables}}
	message, err := typhenapi.NewMessageFromBytes(data)

	if err != nil {
		if api.errorHandler != nil {
			api.errorHandler(data, err)
		}
		return err
	}

	switch message.Type {
	{{#each variables}}
	case MessageType_{{upperCamelCase name}}:
		typhenType := new({{typeName type null false false}})
		if err := api.serializer.Deserialize(message.Body, typhenType); err != nil {
			if api.errorHandler != nil {
				api.errorHandler(data, err)
			}
			return err
		}

		if err := typhenType.Coerce(); err != nil {
			if api.errorHandler != nil {
				api.errorHandler(data, err)
			}
			return err
		}

		if api.On{{upperCamelCase name}}Receive != nil {
			api.On{{upperCamelCase name}}Receive(typhenType)
		}
	{{/each}}
	}
	{{/if}}

	return nil
}

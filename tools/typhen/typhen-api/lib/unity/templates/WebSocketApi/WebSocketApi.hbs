// This file was generated by typhen-api

using System;
using System.Collections.Generic;

namespace TyphenApi.WebSocketApi{{#if namespace}}.Parts.{{upperCamelCase namespace}}{{/if}}
{
    public partial class {{upperCamelCase name}} : TyphenApi.IWebSocketApi
    {
        {{#if (realTimeMessages types)}}
        public enum MessageType
        {
            {{#each (realTimeMessages types)}}
            {{upperCamelCase name}} = {{webSocketMessageType this}},
            {{/each}}
        }
        {{/if}}

        {{#if (realTimeMessages types)}}
        readonly IWebSocketSession session;
        {{/if}}

        {{#each (realTimeMessages types)}}
        public event Action<{{{typeName this}}}> On{{upperCamelCase name}}Receive;
        {{/each}}

        {{#each modules}}
        {{#if (realTimeMessages types)}}
        public TyphenApi.WebSocketApi.Parts.{{upperCamelCase fullName}} {{upperCamelCase name}} { get; private set; }
        {{/if}}
        {{/each}}

        public {{upperCamelCase name}}(IWebSocketSession session)
        {
            {{#if (realTimeMessages types)}}
            this.session = session;
            {{/if}}

            {{#each modules}}
            {{#if (realTimeMessages types)}}
            {{upperCamelCase name}} = new TyphenApi.WebSocketApi.Parts.{{upperCamelCase fullName}}(session);
            {{/if}}
            {{/each}}
        }

        {{#each (realTimeMessages types)}}
        public void Send{{upperCamelCase name}}({{{typeName this}}} {{lowerCamelCase name}})
        {
            session.Send((int)MessageType.{{upperCamelCase name}}, {{lowerCamelCase name}});
        }

        public void Send{{upperCamelCase name}}({{#each properties}}{{{typeName type}}} {{lowerCamelCase name}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            session.Send((int)MessageType.{{upperCamelCase name}}, new {{{typeName this}}}()
            {
                {{#each properties}}
                {{upperCamelCase name}} = {{lowerCamelCase name}},
                {{/each}}
            });
        }
        {{/each}}

        public TyphenApi.IType DispatchMessageEvent(int messageType, byte[] messageData)
        {
            {{#if (realTimeMessages types)}}
            switch ((MessageType)messageType)
            {
                {{#each (realTimeMessages types)}}
                case MessageType.{{upperCamelCase name}}:
                {
                    var message = session.MessageDeserializer.Deserialize<{{{typeName this}}}>(messageData);

                    if (On{{upperCamelCase name}}Receive != null)
                    {
                        On{{upperCamelCase name}}Receive(message);
                    }

                    return message;
                }
                {{/each}}
            }
            {{/if}}

            {{#each modules}}
            {{#if @first}}
            TyphenApi.IType message;
            {{/if}}

            {{#if (realTimeMessages types)}}
            message = {{upperCamelCase name}}.DispatchMessageEvent(messageType, messageData);
            if (message != null)
            {
                return message;
            }
            {{/if}}
            {{/each}}

            return null;
        }
    }
}

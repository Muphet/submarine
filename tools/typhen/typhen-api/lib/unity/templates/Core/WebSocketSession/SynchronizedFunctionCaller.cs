// This file was generated by typhen-api

using System.Collections;
using System.Collections.Generic;

namespace TyphenApi
{
    public class SynchronizedFunctionCaller
    {
        public delegate void Function();

        readonly Queue<Function> reservedFunctions = new Queue<Function>();
        readonly Queue<Function> callableFunctions = new Queue<Function>();

        public void ReserveCall(Function function)
        {
            lock (((ICollection)reservedFunctions).SyncRoot)
            {
                reservedFunctions.Enqueue(function);
            }
        }

        public void Call()
        {
            lock (((ICollection)reservedFunctions).SyncRoot)
            {
                while (reservedFunctions.Count > 0)
                {
                    callableFunctions.Enqueue(reservedFunctions.Dequeue());
                }
            }

            while (callableFunctions.Count > 0)
            {
                callableFunctions.Dequeue()();
            }
        }
    }
}

// This file was generated by typhen-api

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using MiniJSON;

namespace TyphenApi
{
    public class JSONSerializer : ISerializer, IDeserializer
    {
        public byte[] Serialize(object obj)
        {
            string text = string.Empty;

            if (obj != null && IsSerializableType(obj.GetType()))
            {
                var dict = SerializeClassOrStruct(obj);
                text = Json.Serialize(dict);
            }

            return Encoding.UTF8.GetBytes(text);
        }

        public T Deserialize<T>(byte[] bytes) where T : new()
        {
            if (bytes.Length > 0)
            {
                var text = Encoding.UTF8.GetString(bytes);
                var dict = Json.Deserialize(text) as Dictionary<string, object>;
                var deserialized = DeserializeClassOrStruct(typeof(T), dict);
                return (T)deserialized;
            }
            else
            {
                return default(T);
            }
        }

        Dictionary<string, object> SerializeClassOrStruct(object obj)
        {
            var dict = new Dictionary<string, object>();

            foreach (var info in SerializationInfoFinder.FindAll(obj))
            {
                var value = info.GetValue(obj);
                if (value != null)
                {
                    dict[info.PropertyName] = SerializeValue(value, info.ValueType);
                }
                else if (!info.IsOptional)
                {
                    throw new NoNullAllowedException(string.Format("{0}.{1} is not allowed to be null.", obj.GetType().FullName, info.PropertyName));
                }
            }
            return dict;
        }

        object SerializeValue(object value, System.Type valueType)
        {
            if (IsValue(value, valueType))
            {
                return valueType.IsEnum ? (long)value : value;
            }
            else if (IsList(value))
            {
                var itemType = valueType.GetGenericArguments().First();
                return ((IList<object>)value).Select(i => SerializeValue(i, itemType)).ToList();
            }
            else if (IsSerializableType(valueType))
            {
                return SerializeClassOrStruct(value);
            }
            throw new SerializeFailedException(string.Format("Failed to serialize {0} to {1}", value, valueType));
        }

        object DeserializeClassOrStruct(System.Type objType, Dictionary<string, object> dict)
        {
            object obj = Activator.CreateInstance(objType);

            foreach (var info in SerializationInfoFinder.FindAll(objType))
            {
                var value = dict[info.PropertyName];
                if (value != null)
                {
                    info.SetValue(obj, DeserializeValue(value, info.ValueType));
                }
                else if (!info.IsOptional)
                {
                    throw new NoNullAllowedException(string.Format("{0}.{1} is not allowed to be null.", objType.FullName, info.PropertyName));
                }
            }
            return obj;
        }

        object DeserializeValue(object value, System.Type valueType)
        {
            if (IsValue(value, valueType))
            {
                return value;
            }
            else if (IsList(value))
            {
                var itemType = valueType.GetGenericArguments().First();
                return ((IList<object>)value).Select(i => DeserializeValue(i, itemType));
            }
            else if (IsSerializableType(valueType))
            {
                return DeserializeClassOrStruct(valueType, (Dictionary<string, object>)value);
            }
            throw new DeserializeFailedException(string.Format("Failed to deserialize {0} to {1}", value, valueType));
        }

        bool IsSerializableType(System.Type type)
        {
            return type.IsClass || IsStruct(type);
        }

        bool IsStruct(System.Type type)
        {
            return type.IsValueType && !type.IsEnum;
        }

        bool IsValue(object value, System.Type valueType)
        {
            return valueType.IsPrimitive || valueType.IsEnum || value is string;
        }

        bool IsList(object value)
        {
            return value is IList;
        }

        bool IsDictionary(object value, System.Type valueType)
        {
            return value is IDictionary && typeof(IDictionary).IsAssignableFrom(valueType);
        }
    }
}

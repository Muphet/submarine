# This file was generated by typhen-api

module TyphenApi
  module SpecHelper
    module Integration
      def post(path, options=nil)
        options ||= {}
        options[:as] ||= TyphenApiRespondable::RENDER_FORMAT
        super(path, options)
      end
    end
  end

  def self.configure!
    if msgpack_enabled?
      Mime::Type.register "application/x-msgpack", :msgpack
      ActionDispatch::Request.parameter_parsers[:msgpack] = -> (raw_post) do
        MessagePack.unpack(raw_post)
      end
      ActionController::Renderers.add :msgpack do |body, options|
        self.content_type ||= Mime[:msgpack]
        body.respond_to?(:to_msgpack) ? body.to_msgpack(options) : body
      end
    end
  end

  def self.configure_for_rspec!
    if msgpack_enabled?
      ActionDispatch::IntegrationTest.register_encoder(
        :msgpack,
        param_encoder: -> params { params.nil? ? {} : to_serializable_object(params).to_msgpack },
        response_parser: -> body { MessagePack.unpack(body) || {} }
      )
    end
    RSpec.configure do |config|
      config.include SpecHelper::Integration, type: :request
    end
  end

  # NOTE: hack to serialize a virtus object to MessagePack.
  def self.to_serializable_object(target)
    return target unless target.respond_to?(:to_h)
    target_as_hash = target.to_h
    return nil if target_as_hash.keys.size == 0

    target_as_hash.each_with_object({}) do |(k, v), h|
      if v.is_a? Array
        h[k] = v.map {|v| to_serializable_object(v) }
      else
        h[k] = to_serializable_object(v)
      end
    end
  end

  private

  def self.msgpack_enabled?
    Module::const_defined?(:MessagePack)
  end
end
